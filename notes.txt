New table with users

change subject to year levels

more courses per year levels

ssh root@159.223.1.36

Click on missing operator: A _ B = C

Click on bigger fraction. Only have fraction/decimal now

How many decimal points are valid

Perimeter of shapes

Volume of shapes

Divisibility with N? Is 123 divisible by 3? etc

Connect to db:
sudo -u postgres psql
\l to check tables
\c dbname to connect
\dt to list tables in db
TRUNCATE TABLE table_name; to delete all rows in table

cd to backend, and run "cargo sqlx prepare" to fix github actions

--- BATTLE ---
import React, { useState, useEffect } from 'react';
import { Zap, Heart, Shield, Sword, Star, Trophy } from 'lucide-react';

const MathBattleGame = () => {
  const [gameState, setGameState] = useState('menu'); // menu, battle, victory, defeat
  const [playerCreature, setPlayerCreature] = useState({
    name: 'Algebragon',
    type: 'Math Dragon',
    hp: 100,
    maxHp: 100,
    level: 1,
    exp: 0,
    expToNext: 100
  });
  
  const [enemyCreature, setEnemyCreature] = useState({
    name: 'Arithmetic Wolf',
    type: 'Number Beast',
    hp: 80,
    maxHp: 80,
    level: 1
  });

  const [attackType, setAttackType] = useState(null); // 'basic' or 'combo'
  const [currentProblems, setCurrentProblems] = useState([]);
  const [userAnswers, setUserAnswers] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [battleLog, setBattleLog] = useState([]);
  const [score, setScore] = useState(0);
  const [streak, setStreak] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [attackResults, setAttackResults] = useState([]);
  const [questionStartTime, setQuestionStartTime] = useState(null);
  const [totalAnswerTime, setTotalAnswerTime] = useState(0);

  const mathProblems = {
    addition: () => {
      const a = Math.floor(Math.random() * 50) + 1;
      const b = Math.floor(Math.random() * 50) + 1;
      return { question: `${a} + ${b}`, answer: a + b, type: 'Addition' };
    },
    subtraction: () => {
      const a = Math.floor(Math.random() * 50) + 25;
      const b = Math.floor(Math.random() * 25) + 1;
      return { question: `${a} - ${b}`, answer: a - b, type: 'Subtraction' };
    },
    multiplication: () => {
      const a = Math.floor(Math.random() * 12) + 1;
      const b = Math.floor(Math.random() * 12) + 1;
      return { question: `${a} × ${b}`, answer: a * b, type: 'Multiplication' };
    },
    division: () => {
      const b = Math.floor(Math.random() * 12) + 1;
      const answer = Math.floor(Math.random() * 12) + 1;
      const a = b * answer;
      return { question: `${a} ÷ ${b}`, answer: answer, type: 'Division' };
    }
  };

  const generateProblem = () => {
    const types = Object.keys(mathProblems);
    const randomType = types[Math.floor(Math.random() * types.length)];
    return mathProblems[randomType]();
  };

  const startBattle = () => {
    setGameState('battle');
    setAttackType(null);
    setCurrentProblems([]);
    setUserAnswers([]);
    setCurrentQuestionIndex(0);
    setBattleLog(['Battle begins! Choose your attack strategy!']);
    setPlayerCreature(prev => ({ ...prev, hp: prev.maxHp }));
    setEnemyCreature(prev => ({ ...prev, hp: prev.maxHp }));
  };

  const chooseAttack = (type) => {
    setAttackType(type);
    setTotalAnswerTime(0);
    if (type === 'basic') {
      setCurrentProblems([generateProblem()]);
      setUserAnswers(['']);
      setCurrentQuestionIndex(0);
      setQuestionStartTime(Date.now());
    } else if (type === 'combo') {
      setCurrentProblems([generateProblem(), generateProblem(), generateProblem()]);
      setUserAnswers(['', '', '']);
      setCurrentQuestionIndex(0);
      setQuestionStartTime(Date.now());
    }
  };

  const calculateSpeedBonus = (timeInSeconds) => {
    // Speed bonus: 10% bonus for under 3 seconds, 5% for under 5 seconds
    if (timeInSeconds < 3) return 1.1;
    if (timeInSeconds < 5) return 1.05;
    return 1.0;
  };

  const submitAnswer = () => {
    const currentAnswer = userAnswers[currentQuestionIndex];
    if (!currentAnswer) return;
    
    const answerTime = (Date.now() - questionStartTime) / 1000;
    setTotalAnswerTime(prev => prev + answerTime);
    
    const correct = parseInt(currentAnswer) === currentProblems[currentQuestionIndex].answer;
    const newResults = [...attackResults];
    newResults[currentQuestionIndex] = correct;
    setAttackResults(newResults);
    
    if (attackType === 'basic') {
      // Basic attack - immediate resolution
      setShowFeedback(true);
      
      setTimeout(() => {
        if (correct) {
          // Basic attack damage with speed bonus
          const baseDamage = Math.floor(Math.random() * 15) + 10 + Math.floor(streak / 2);
          const speedBonus = calculateSpeedBonus(answerTime);
          const damage = Math.floor(baseDamage * speedBonus);
          const newEnemyHp = Math.max(0, enemyCreature.hp - damage);
          setEnemyCreature(prev => ({ ...prev, hp: newEnemyHp }));
          
          setStreak(prev => prev + 1);
          setScore(prev => prev + 5 + Math.floor(streak / 2));
          
          const speedText = speedBonus > 1 ? ` (Speed bonus: ${Math.floor((speedBonus - 1) * 100)}%)` : '';
          setBattleLog(prev => [...prev, `✓ Basic Attack! ${playerCreature.name} deals ${damage} damage!${speedText}`]);
          
          if (newEnemyHp <= 0) {
            setBattleLog(prev => [...prev, `${enemyCreature.name} is defeated! You win!`]);
            setGameState('victory');
            gainExperience();
          } else {
            enemyAttack();
          }
        } else {
          // Wrong answer
          setStreak(0);
          setBattleLog(prev => [...prev, `✗ Wrong! The answer was ${currentProblems[0].answer}. Attack missed!`]);
          enemyAttack();
        }
        
        resetAttack();
      }, 1500);
    } else if (attackType === 'combo') {
      if (!correct) {
        // Combo attack fails immediately on wrong answer
        setShowFeedback(true);
        setStreak(0);
        setBattleLog(prev => [...prev, `✗ Combo Attack Failed! Wrong answer: ${currentProblems[currentQuestionIndex].answer}. Attack missed completely!`]);
        
        setTimeout(() => {
          enemyAttack();
          resetAttack();
        }, 2000);
      } else if (currentQuestionIndex < currentProblems.length - 1) {
        // Move to next question in combo
        setCurrentQuestionIndex(prev => prev + 1);
        setQuestionStartTime(Date.now());
      } else {
        // All questions answered correctly - combo success!
        setShowFeedback(true);
        
        setTimeout(() => {
          // Combo attack success with speed bonus based on total time
          const avgTime = totalAnswerTime / currentProblems.length;
          const baseDamage = Math.floor(Math.random() * 25) + 25 + (streak * 3);
          const speedBonus = calculateSpeedBonus(avgTime);
          const damage = Math.floor(baseDamage * speedBonus);
          const newEnemyHp = Math.max(0, enemyCreature.hp - damage);
          setEnemyCreature(prev => ({ ...prev, hp: newEnemyHp }));
          
          setStreak(prev => prev + 3);
          setScore(prev => prev + 25 + (streak * 2));
          
          const speedText = speedBonus > 1 ? ` (Speed bonus: ${Math.floor((speedBonus - 1) * 100)}%)` : '';
          setBattleLog(prev => [...prev, `🔥 COMBO ATTACK! All correct! ${playerCreature.name} deals ${damage} massive damage!${speedText}`]);
          
          if (newEnemyHp <= 0) {
            setBattleLog(prev => [...prev, `${enemyCreature.name} is defeated! You win!`]);
            setGameState('victory');
            gainExperience();
          } else {
            enemyAttack();
          }
          
          resetAttack();
        }, 2000);
      }
    }
  };

  const enemyAttack = () => {
    setTimeout(() => {
      const enemyDamage = Math.floor(Math.random() * 15) + 10;
      const newPlayerHp = Math.max(0, playerCreature.hp - enemyDamage);
      setPlayerCreature(prev => ({ ...prev, hp: newPlayerHp }));
      setBattleLog(prev => [...prev, `${enemyCreature.name} attacks for ${enemyDamage} damage!`]);
      
      if (newPlayerHp <= 0) {
        setGameState('defeat');
      }
    }, 1000);
  };

  const gainExperience = () => {
    const expGained = 50;
    setPlayerCreature(prev => {
      const newExp = prev.exp + expGained;
      if (newExp >= prev.expToNext) {
        return {
          ...prev,
          exp: newExp - prev.expToNext,
          level: prev.level + 1,
          maxHp: prev.maxHp + 20,
          hp: prev.maxHp + 20,
          expToNext: prev.expToNext + 50
        };
      }
      return { ...prev, exp: newExp };
    });
  };

  const resetAttack = () => {
    setAttackType(null);
    setCurrentProblems([]);
    setUserAnswers([]);
    setCurrentQuestionIndex(0);
    setShowFeedback(false);
    setAttackResults([]);
    setQuestionStartTime(null);
    setTotalAnswerTime(0);
  };

  const updateAnswer = (value) => {
    const newAnswers = [...userAnswers];
    newAnswers[currentQuestionIndex] = value;
    setUserAnswers(newAnswers);
  };

  const resetGame = () => {
    setGameState('menu');
    setScore(0);
    setStreak(0);
    setBattleLog([]);
    setPlayerCreature(prev => ({ ...prev, hp: prev.maxHp }));
    setEnemyCreature(prev => ({ ...prev, hp: prev.maxHp }));
  };

  const HPBar = ({ current, max, color = "bg-green-500" }) => (
    <div className="w-full bg-gray-300 rounded-full h-4">
      <div 
        className={`${color} h-4 rounded-full transition-all duration-500`}
        style={{ width: `${(current / max) * 100}%` }}
      />
      <div className="text-xs text-center text-gray-700 mt-1">
        {current}/{max} HP
      </div>
    </div>
  );

  if (gameState === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-b from-blue-400 to-purple-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-2xl p-8 max-w-md w-full text-center">
          <div className="text-4xl font-bold text-purple-800 mb-4">🐉 MathMon Battle</div>
          <p className="text-gray-600 mb-6">Train your math skills in epic battles!</p>
          
          <div className="bg-purple-100 p-4 rounded-lg mb-6">
            <div className="flex items-center justify-center mb-2">
              <Star className="text-yellow-500 mr-2" />
              <span className="font-semibold">Your Creature</span>
            </div>
            <div className="text-lg font-bold text-purple-700">{playerCreature.name}</div>
            <div className="text-sm text-purple-600">Level {playerCreature.level} {playerCreature.type}</div>
            <div className="text-xs text-gray-600 mt-2">
              EXP: {playerCreature.exp}/{playerCreature.expToNext}
            </div>
          </div>
          
          <button 
            onClick={startBattle}
            className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition-colors w-full"
          >
            Start Battle!
          </button>
        </div>
      </div>
    );
  }

  if (gameState === 'battle') {
    return (
      <div className="min-h-screen bg-gradient-to-b from-red-400 to-orange-600 p-4">
        <div className="max-w-4xl mx-auto">
          {/* Battle Arena */}
          <div className="bg-white rounded-lg shadow-2xl p-6 mb-4">
            <div className="grid grid-cols-2 gap-8">
              {/* Player Side */}
              <div className="text-center">
                <div className="text-6xl mb-2">🐉</div>
                <div className="font-bold text-lg text-blue-600">{playerCreature.name}</div>
                <div className="text-sm text-gray-600 mb-2">Level {playerCreature.level}</div>
                <HPBar current={playerCreature.hp} max={playerCreature.maxHp} color="bg-blue-500" />
              </div>
              
              {/* Enemy Side */}
              <div className="text-center">
                <div className="text-6xl mb-2">🐺</div>
                <div className="font-bold text-lg text-red-600">{enemyCreature.name}</div>
                <div className="text-sm text-gray-600 mb-2">Level {enemyCreature.level}</div>
                <HPBar current={enemyCreature.hp} max={enemyCreature.maxHp} color="bg-red-500" />
              </div>
            </div>
          </div>

          {/* Stats */}
          <div className="bg-white rounded-lg shadow-xl p-4 mb-4">
            <div className="flex justify-between items-center">
              <div className="flex items-center">
                <Trophy className="text-yellow-500 mr-2" />
                <span className="font-semibold">Score: {score}</span>
              </div>
              <div className="flex items-center">
                <Zap className="text-orange-500 mr-2" />
                <span className="font-semibold">Streak: {streak}</span>
              </div>
            </div>
          </div>

          {/* Math Problem or Attack Selection */}
          <div className="bg-white rounded-lg shadow-2xl p-6 mb-4">
            {!attackType ? (
              /* Attack Selection */
              <div className="text-center">
                <div className="text-xl font-bold text-purple-800 mb-6">Choose Your Attack!</div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <button
                    onClick={() => chooseAttack('basic')}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-6 px-6 rounded-lg transition-colors"
                  >
                    <div className="flex items-center justify-center mb-2">
                      <Sword className="mr-2" />
                      <span className="text-lg">Basic Attack</span>
                    </div>
                    <div className="text-sm opacity-90">
                      Solve 1 problem<br/>
                      Low-Medium damage<br/>
                      Safe option
                    </div>
                  </button>
                  
                  <button
                    onClick={() => chooseAttack('combo')}
                    className="bg-red-500 hover:bg-red-600 text-white font-bold py-6 px-6 rounded-lg transition-colors"
                  >
                    <div className="flex items-center justify-center mb-2">
                      <Zap className="mr-2" />
                      <span className="text-lg">Combo Attack</span>
                    </div>
                    <div className="text-sm opacity-90">
                      Solve 3 problems<br/>
                      High damage if all correct<br/>
                      Miss if any wrong!
                    </div>
                  </button>
                </div>
              </div>
            ) : (
              /* Problem Solving */
              <div className="text-center">
                <div className="text-sm text-gray-600 mb-2">
                  {attackType === 'basic' ? 'Basic Attack' : `Combo Attack (${currentQuestionIndex + 1}/3)`}
                </div>
                
                {attackType === 'combo' && (
                  <div className="flex justify-center mb-4">
                    {currentProblems.map((_, index) => (
                      <div 
                        key={index} 
                        className={`w-4 h-4 rounded-full mx-1 ${
                          index < currentQuestionIndex ? 
                            (attackResults[index] ? 'bg-green-500' : 'bg-red-500') :
                          index === currentQuestionIndex ? 'bg-blue-500' : 'bg-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                )}
                
                <div className="text-3xl font-bold text-purple-800 mb-4">
                  {currentProblems[currentQuestionIndex]?.question} = ?
                </div>
                <div className="text-sm text-blue-600 mb-4">
                  ({currentProblems[currentQuestionIndex]?.type})
                </div>
                
                {showFeedback ? (
                  <div className="text-xl font-bold">
                    {attackType === 'basic' ? (
                      attackResults[0] ? (
                        <span className="text-green-600">✓ Hit!</span>
                      ) : (
                        <span className="text-red-600">✗ Missed! Answer: {currentProblems[0].answer}</span>
                      )
                    ) : (
                      /* Combo attack feedback - only shows if failed or completed */
                      attackResults[currentQuestionIndex] === false ? (
                        <div>
                          <span className="text-red-600">✗ COMBO FAILED!</span>
                          <div className="text-sm mt-2 text-red-600">
                            Wrong answer: {currentProblems[currentQuestionIndex].question} = {currentProblems[currentQuestionIndex].answer}
                          </div>
                        </div>
                      ) : (
                        <span className="text-green-600">🔥 COMBO SUCCESS!</span>
                      )
                    )}
                  </div>
                ) : (
                  <div className="flex gap-2 justify-center">
                    <input
                      type="number"
                      value={userAnswers[currentQuestionIndex] || ''}
                      onChange={(e) => updateAnswer(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && submitAnswer()}
                      className="border-2 border-purple-300 rounded-lg px-4 py-2 text-center text-xl w-32"
                      placeholder="?"
                      autoFocus
                    />
                    <button
                      onClick={submitAnswer}
                      className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition-colors"
                    >
                      {attackType === 'combo' && currentQuestionIndex < currentProblems.length - 1 ? 'Next' : 'Attack!'}
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Battle Log */}
          <div className="bg-gray-800 text-green-400 rounded-lg p-4 h-32 overflow-y-auto font-mono text-sm">
            {battleLog.map((log, index) => (
              <div key={index} className="mb-1">{log}</div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (gameState === 'victory' || gameState === 'defeat') {
    return (
      <div className="min-h-screen bg-gradient-to-b from-yellow-400 to-orange-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-2xl p-8 max-w-md w-full text-center">
          <div className="text-6xl mb-4">
            {gameState === 'victory' ? '🏆' : '💀'}
          </div>
          <div className="text-2xl font-bold mb-4">
            {gameState === 'victory' ? 'Victory!' : 'Defeat!'}
          </div>
          <div className="text-gray-600 mb-6">
            {gameState === 'victory' 
              ? `Great job! Final score: ${score}` 
              : 'Better luck next time! Keep practicing your math skills.'}
          </div>
          
          {gameState === 'victory' && playerCreature.level > 1 && (
            <div className="bg-yellow-100 p-4 rounded-lg mb-4">
              <div className="font-bold text-yellow-800">Level Up!</div>
              <div className="text-sm text-yellow-700">
                {playerCreature.name} reached Level {playerCreature.level}!
              </div>
            </div>
          )}
          
          <button 
            onClick={resetGame}
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors w-full"
          >
            Return to Menu
          </button>
        </div>
      </div>
    );
  }
};

export default MathBattleGame;