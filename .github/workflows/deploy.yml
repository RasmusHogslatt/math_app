name: Deploy Rust App to Droplet

on:
  push:
    # IMPORTANT: Changed from 'master' to 'main' based on common practice.
    # Update this if your main branch is indeed named 'master'.
    branches: [ master ]

env:
  # Define environment variables used across jobs/steps
  APP_DIR: /var/www/math_app # Deployment directory on the server
  BACKEND_BINARY_NAME: backend # Match the binary name produced by cargo build
  SERVICE_NAME: math_app.service # Name of the systemd service

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Use an Ubuntu runner in GitHub Actions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable # Or specify your Rust version
        targets: wasm32-unknown-unknown # Target needed for wasm frontend

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/ # Cache the build target directory (workspace root)
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Trunk and wasm-bindgen-cli
      run: cargo install --locked trunk wasm-bindgen-cli

    - name: Build Frontend (Trunk)
      # Ensure assets are referenced correctly relative to the domain root
      run: cd frontend && trunk build --release --public-url /

    - name: Build Backend (Release)
      # Build only the specific backend binary needed for deployment
      # No need to cd here if building the workspace member
      run: cargo build --release --bin ${{ env.BACKEND_BINARY_NAME }}
      env:
        SQLX_OFFLINE: "true" # Use metadata from local database for SQLx (if applicable)

    - name: Prepare deployment package
      run: |
        mkdir deploy_package
        echo "Copying backend binary from target/release/..."
        # Assuming standard workspace layout, binary is in workspace_root/target/release
        cp target/release/${{ env.BACKEND_BINARY_NAME }} deploy_package/ || exit 1 # Exit if copy fails

        echo "Copying frontend dist from frontend/dist/..."
        cp -r frontend/dist deploy_package/ || exit 1 # Exit if copy fails

        echo "--- Contents of deploy_package: ---"
        ls -lR deploy_package # List contents for verification

    # --- Use scp-action for reliable file transfer ---
    - name: Copy files via SCP
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "./deploy_package/*" # Copy contents of the package directory
        target: ${{ env.APP_DIR }}
        strip_components: 1 # Removes the 'deploy_package' directory layer during copy
        overwrite: true
        # debug: true # Enable extra logging for SCP if needed

    # --- Run server-side commands AFTER files are copied ---
    - name: Run server-side commands (Permissions & Restart Service)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "--- Contents of ${{ env.APP_DIR }} after SCP: ---"
          ls -la ${{ env.APP_DIR }}
          echo "-----------------------------------------------------"

          # Note: Assuming SSH_USER has sudo privileges without password,
          # or you have configured sudoers appropriately.

          echo "Setting permissions and ownership..."
          cd ${{ env.APP_DIR }} || exit 1 # Change to app directory

          if [ -f "${{ env.BACKEND_BINARY_NAME }}" ]; then
            echo "Setting ownership for backend..."
            sudo chown root:root ${{ env.BACKEND_BINARY_NAME }}
            echo "Setting executable permission for backend..."
            sudo chmod +x ${{ env.BACKEND_BINARY_NAME }}
          else
            echo "ERROR: Backend binary '${{ env.BACKEND_BINARY_NAME }}' not found in ${{ env.APP_DIR }}!"
            exit 1 # Fail the job
          fi

          if [ -d "dist" ]; then
            echo "Setting ownership for dist directory..."
            sudo chown -R root:root dist
            echo "Setting read permissions for dist directory (for Nginx)..."
            # Ensure Nginx user (often www-data) can read files and traverse directories
            sudo chmod -R a+r dist
            # Ensure directories within dist are executable (listable)
            find dist -type d -exec sudo chmod a+x {} \;
          else
            echo "ERROR: Frontend 'dist' directory not found in ${{ env.APP_DIR }}!"
            exit 1 # Fail the job
          fi

          echo "Restarting service ${{ env.SERVICE_NAME }}..."
          sudo systemctl restart ${{ env.SERVICE_NAME }}

          echo "Checking service status..."
          sleep 5 # Give service a moment to potentially start/fail
          sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager || echo "Warning: Service status check command failed or service not active."

          echo "Deployment commands complete!"